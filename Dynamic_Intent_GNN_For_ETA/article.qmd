---
title: "Dynamic Graph Neural Networks for Accurate ETA prediction"
author:
  - name: "Guy Tordjman"
    affiliation: "The Open University, Israel"
  - name: "Nadav Voloch"
    affiliation: "Ruppin Academic Center, Israel"
format: 
  pdf:
    documentclass: IEEEtran
    classoption: [lettersize, journal]
    pdf-engine: pdflatex
    number-sections: true
    keep-tex: true
    include-in-header:
      - ieee-header.tex
bibliography: references.bib
keywords: [ETA prediction, graph neural networks, spatio-temporal graphs, user intent, traffic forecasting]
---

# Abstract

Accurate Estimated Time of Arrival (ETA) prediction is crucial for modern navigation systems and intelligent transportation applications. While existing approaches rely on static routing algorithms or machine learning models that infer likely paths between origin and destination, they fail to leverage the user's actual intended route and the dynamic nature of traffic interactions. This paper introduces a novel Dynamic Graph Neural Network (DGNN) architecture that explicitly incorporates user route intent and temporal memory to achieve superior ETA prediction accuracy.

Our approach represents the transportation network as a dynamic multi-relational graph where junctions and vehicles are nodes, connected by typed edges capturing road segments, vehicle traversals, traffic interactions, and route intentions. The model employs a mixture-of-experts architecture with 6 specialized experts and a memory layer that records historical snapshots to capture temporal dependencies. Unlike existing benchmarks that lack explicit route representation, our dataset unifies junction states, vehicle dynamics, and pre-planned route information, enabling the model to condition predictions on the actual path intended by travelers.

Experimental results on simulated traffic data demonstrate the effectiveness of our approach. The model achieves a validation MAE of [RESULTS_PLACEHOLDER] seconds, representing a [IMPROVEMENT_PLACEHOLDER]% improvement over baseline methods. Performance analysis across different trip duration bins shows particularly strong results for [DETAILED_RESULTS_PLACEHOLDER]. The mixture-of-experts architecture with route awareness proves essential for handling heterogeneous traffic regimes, with the router entropy stabilizing at [ENTROPY_PLACEHOLDER] indicating effective expert specialization.

**Key contributions:** (1) First dynamic graph-based dataset for ETA prediction incorporating explicit user route intent, (2) Novel DGNN architecture with mixture-of-experts and temporal memory layers, (3) Comprehensive evaluation demonstrating significant accuracy improvements over existing approaches that lack route awareness and dynamic graph modeling.

# Introduction

\IEEEPARstart{E}{stimated} Time of Arrival (ETA) prediction is a fundamental component of modern navigation systems and intelligent transportation applications. Accurate ETA enables commuters to make informed travel decisions, supports fleet management and logistics operations, and reduces congestion by distributing demand across the road network. With the ubiquity of GPS-enabled devices and connected vehicles, navigation platforms such as Google Maps and Waze [@derrowpinion2021googlemaps; @hoseinzadeh2020waze; @amin-naseri2018waze] have transformed how travelers plan and adapt their journeys. However, despite significant progress, ETA estimation remains challenging due to the dynamic and stochastic nature of urban traffic.

Traditional approaches to ETA computation rely on shortest-path algorithms such as Dijkstra's algorithm [@dijkstra1959], which provide efficient solutions under static conditions but do not account for evolving congestion or interaction effects between vehicles. As a result, travel times computed via such methods can diverge substantially from reality when traffic conditions fluctuate during the trip.

With the growth of urban mobility datasets, machine-learning approaches have been introduced. Tree-based models such as XGBoost [@chen2016xgboost] predict ETA from handcrafted features (e.g., distance, departure time, day-of-week) and perform well on aggregated trip records like NYC Taxi [@nyc_tlc] and Porto Taxi [@moreira2013porto]. Deep learning methods improve performance by modeling temporal patterns and spatio-temporal context along a route: DeepTTE learns ETA from raw GPS traces [@wang2018deeptte]; TADNM incorporates transportation-mode awareness [@xu2020tadnm]; MetaTTE applies meta-learning for cross-city generalization [@wang2022metatte]; and STAD corrects routing-engine outputs using spatio-temporal adjustments [@abbar2020stad].

In parallel, graph-based spatio-temporal learning has advanced traffic prediction by representing road networks as graphs and learning their dynamics with diffusion or convolution operators (e.g., DCRNN, ST-GCN, Graph WaveNet) [@li2018dcrnn; @yu2018stgcn; @wu2019graphwavenet]. Nevertheless, existing benchmarks (NYC, Porto, Chengdu/DiDi, Geolife) [@nyc_tlc; @moreira2013porto; @didi2016; @zheng2012geolife] lack explicit representation of the user's **pre-planned route**. Models must therefore infer the likely path between origin and destination, introducing ambiguity and reducing prediction accuracy. Early work proposed incorporating future-traffic–aware route selection to improve ETA accuracy [@voloch2021]. We build on this direction by explicitly modeling user intent and the pre-planned route within a dynamic spatio-temporal graph, and by learning ETA with a graph-based mixture-of-experts architecture.

This paper addresses these limitations by introducing a novel Dynamic Graph Neural Network (DGNN) that explicitly incorporates user route intent and temporal memory. Our approach represents the transportation network as a dynamic multi-relational graph where both junctions and vehicles are nodes, connected by typed edges that capture road segments, vehicle traversals, traffic interactions, and route intentions. The model employs a mixture-of-experts architecture with specialized experts and a memory layer that records historical snapshots to capture temporal dependencies.

**Contributions.**  
1) We introduce the first dynamic graph-based dataset for ETA prediction that unifies junction states, vehicle dynamics, and explicit pre-planned route information.  
2) We propose a novel DGNN architecture that combines graph attention, temporal encoding, and mixture-of-experts specialization for accurate ETA prediction.  
3) We conduct comprehensive experiments on simulated traffic data, demonstrating significant accuracy improvements over existing approaches that lack route awareness and dynamic graph modeling.

# Related Work

## Classical pathfinding and routing

Modern navigation stacks historically separate **route computation** from **travel-time estimation**. On a static graph $G=(V,E)$ with non-negative edge costs, the canonical approach is to compute the minimum-cost path using Dijkstra's label-setting algorithm [@dijkstra1959], then obtain an ETA by summing edge weights along the selected path. This paradigm assumes costs are fixed during the trip and ignores how congestion evolves while the vehicle is en route.

### Static vs. time-dependent routing
In practice, edge costs are **time-dependent**: the travel time of a road segment $e\in E$ is a function $c_e(t)$ of the departure time $t$. The **time-dependent shortest path (TDSP)** problem generalizes classical routing by optimizing arrival time given these functions. Under the FIFO (first-in–first-out) property—i.e., departing later cannot lead to an earlier arrival—label-setting methods can be adapted to TD networks; otherwise, label-correcting techniques are required (with weaker optimality guarantees). Despite this, most production systems still approximate TDSP by (i) computing a route under "current" costs and (ii) aggregating ETAs along that route, or by using coarse predictive layers on top of a static route—both approaches remain **route-first** rather than **ETA-first** and can drift as traffic evolves.

### Speed-up techniques for web-scale routing
Because city- and nation-scale graphs contain millions of nodes, raw Dijkstra is too slow for interactive use. A large body of work speeds up queries via preprocessing:

- **A\*** with **ALT landmarks** adds an admissible heuristic via triangle inequalities to reduce the search space [@goldberg2005alt].  
- **Contraction Hierarchies (CH)** contract low-importance vertices to build shortcuts, enabling millisecond-level exact queries on road networks [@geisberger2008ch].  
- **Highway-dimension theory** explains why such hierarchies are effective on real networks and yields provable bounds [@abraham2010highwaydimension].  
- **Arc-flags/SHARC** and **Multi-Level/Customizable Route Planning (CRP)** partition the graph; CRP separates metric-independent preprocessing from a fast "customization" step for new cost profiles [@delling2011crp].

These techniques deliver fast **static** (or piecewise-static) queries. Extensions exist for **time-dependent** costs, but accuracy hinges on the fidelity of $c_e(t)$, and updates must be frequent to track live congestion.

### Multi-criteria and k-shortest paths
In urban routing, users often optimize multiple criteria (time, tolls, reliability). **k-shortest paths** (e.g., Yen's algorithm) enumerate alternatives for robustness or post-processing [@yen1971ksp], yet the ETA still depends on exogenous edge-time models rather than endogenous traffic interactions.

### Limitations for ETA prediction
Classical routing **treats travel time as input**, not as a learned outcome of interacting flows. Even TDSP with high-quality $c_e(t)$ remains **myopic** if those functions are derived from current/historical averages: it does not anticipate **how vehicles currently en route will reshape future speeds** on the chosen path. Consequently, route-first stacks can systematically under- or over-estimate arrival times when congestion is building or dissipating. This motivates **learning-based, graph-temporal** approaches that (i) reason over interactions between vehicles and junctions, and (ii) condition ETA on **the intended route** (when available) to remove path ambiguity—directions pursued by our method.

# Methodology

## Graph representation and construction (formal)

Let $t\in\mathbb{Z}$ index uniformly spaced snapshots (interval $\Delta t$). The transportation state at time $t$ is a **directed, multi-relational graph**
$$G_t=\big(V_t,\ E_t,\ \{A_t^{(\rho)}\}_{\rho\in\mathcal{R}}\big),$$
with
$$V_t=V^{j}\ \cup\ V_t^{v},\qquad V^{j}\cap V_t^{v}=\varnothing,$$
where $V^{j}$ are **junction nodes** (static across time) and $V_t^{v}$ are **vehicle nodes** present at time $t$. Each vehicle $i$ maintains a persistent identity across time; we denote its node at time $t$ by $v_i^{t}\in V_t^{v}$.

We consider a finite set of **edge relations** (types)
$$\mathcal{R}=\{\text{road},\ \text{trav},\ \text{inter},\ \text{intent}\}.$$
For each relation $\rho\in\mathcal{R}$ we define a binary adjacency $A_t^{(\rho)}\in\{0,1\}^{|V_t|\times |V_t|}$ and an optional weight matrix $W_t^{(\rho)}\in\mathbb{R}_{\ge 0}^{|V_t|\times |V_t|}$. The (typed) edge set is
$$E_t^{(\rho)}=\{(u,v): A_t^{(\rho)}[u,v]=1\},\qquad E_t=\biguplus_{\rho\in\mathcal{R}}E_t^{(\rho)}.$$

**Typed edges.** At time $t$,

1) **Road segment edges** ($\rho=\text{road}$): for adjacent junctions $u,v\in V^{j}$ with legal driving direction $u\!\to\!v$,
$$(u,v)\in E^{(\text{road})}_t,\quad A_t^{(\text{road})}[u,v]=1.$$

2) **Traversal edges** ($\rho=\text{trav}$): if vehicle $v_i^{t}$ occupies directed segment $(a,b)$ with $a,b\in V^{j}$,
$$(a, v_i^{t})\in E_t^{(\text{trav})},\qquad (v_i^{t}, b)\in E_t^{(\text{trav})}.$$

3) **Interaction edges** ($\rho=\text{inter}$): for vehicles $v_i^{t}, v_{j}^{t}\in V_t^{v}$ on the same segment (or lane group) with longitudinal spacing $d_{ij}(t)\le \varepsilon$ and aligned headings,
$$(v_i^{t}, v_{j}^{t})\in E_t^{(\text{inter})},\quad W_t^{(\text{inter})}[v_i^{t},v_{j}^{t}]=\omega\!\big(d_{ij}(t)\big),$$
where $\omega:\mathbb{R}_{\ge 0}\!\to\!\mathbb{R}_{\ge 0}$ is a monotone kernel (e.g., $\omega(d)=\exp(-d/\lambda)$).

4) **Intent edges** ($\rho=\text{intent}$): let the **planned route** for vehicle $i$ at departure time $t_0\le t$ be the ordered edge sequence
$$\mathcal{R}_{i}=\big(e_1,e_2,\ldots,e_{K}\big),\qquad e_k=(u_k,u_{k+1})\in E^{(\text{road})}_{t_0}.$$
We connect the vehicle to upcoming junctions along its route,
$$(v_i^{t},\ u_{t,i}^{(k)})\in E_t^{(\text{intent})}\quad \text{for }k=1,\ldots,K_0,$$
with **decay weights** $W_t^{(\text{intent})}[v_i^{t},u_{t,i}^{(k)}]=\alpha_k$ where $\alpha_1\ge\cdots\ge \alpha_{K_0}>0$ (e.g., $\alpha_k\in\{1.0,0.8,0.6,0.4,0.2\}$).

The learning context is a length-$H$ **temporal window**
$$\mathcal{G}_{t-H+1:t}=\big\{G_{\tau}\big\}_{\tau=t-H+1}^{t},$$
used to predict vehicle ETAs at time $t$.

# Results

Run the actual system, evaluate results, and compare to baselines.

# Discussion

Reflect on the results. Where did your model perform well? Where did it struggle? Why?

# Conclusion

Summarize what was learned and propose next steps.

# Acknowledgments

This should be a simple paragraph before the References to thank those individuals and institutions who have supported your work on this article.

# References
